# order items
type Item {
  # The ID of an object
  id: ID!
  name: String
  price: Float
  quantity: Int
  url: String
}

# A connection to a list of items.
type itemConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [itemEdge]
}

# An edge in a connection.
type itemEdge {
  # The item at the end of the edge
  node: Item

  # A cursor for use in pagination
  cursor: String!
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# an order
type Order implements Node {
  # The ID of an object
  id: ID!
  subtotal: Float

  # product items
  items(after: String, first: Int, before: String, last: Int): itemConnection
}

# A connection to a list of items.
type orderConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [orderEdge]
}

# An edge in a connection.
type orderEdge {
  # The item at the end of the edge
  node: Order

  # A cursor for use in pagination
  cursor: String!
}

# a list of orders 
type Orders implements Node {
  # The ID of an object
  id: ID!

  # orders
  orders(after: String, first: Int, before: String, last: Int): orderConnection
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
  orders: Orders
}
